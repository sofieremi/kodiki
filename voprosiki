№1___________________________________________________________________________________________________________

1)
def function(x, y):
    return x + y


print(function(2, 5))
Это функция, которая принимает значения двух аргументов(x и y)
Далее она возвращает сумму полученных аргументов с помощью оператора 'return'
Распечатывается полученный результат функции с уже указаными значениями аргументов
Вывод на экран: 7
2)
def function(x, y):
    print(x + y)


print(function(2,5))
На примере второй функции я показала, что можно написать функцию без оператора 'return'
У данной функции тот же смысл, что и у первой
Разница между ними заключается в том, что на выводе у второй функции будет немного иной результат
Вывод: 7
       None
Почему так происходит?
Дело в том, что любая функция что-то возвращает
В не зависимости, есть ли в ней оператор 'return' или нет
Если при написании функции мы не указываем, что должен возвратить 'return', или вовсе его не используем,
то в конце функции добавляется неявный 'return None'
Следовательно результатом вывода будет 'None'
№2___________________________________________________________________________________________________________

МЕТОД - это какая-либо функция, описанная внутри какого-либо класса.
Метод можно применять для переменных...созданий...(не помню, как это называется)конкретного класса
У каждого класса есть свои методы
№3___________________________________________________________________________________________________________

class Clothes:
    def __init__(self, type, color, characteristics, size):
        self.type = type
        self.color = color
        self.characteristics = characteristics
        self.size = size
    def made(self):
        print(self.type, 'made in Morocco')
skirt = Clothes('skirt', 'black', 'midi', 'xs')
№4___________________________________________________________________________________________________________
можно сказать, что о словарях вообще ничего не знаю 
№5___________________________________________________________________________________________________________

Pop - метод, удаляющий элемент с заданным в аргументе индексом из массива
и возвращающий его(тот самый удаленный элемент)
Remove в отличие от Pop не возвращает удаленный элемент
Insert - метод для массивов, позволяет вставить какой-либо новый элемент по заданному индексу
Принимает два аргумента:
                        первый - индекс
                        второй - элемент, который мы хотим вставить в массив
№6___________________________________________________________________________________________________________
Срез - метод(а может и не метод), который принимает 3 индекса - item[start:stop:step] 
1.Start - срезает элементы до указанного индекса(не включительно)
2.Stop - срезает элементы начиная с указанного индекса(включительно)                   
3.Step -немного запуталась на этом моменте(нужно разобрать)
№7___________________________________________________________________________________________________________
Известные мне на данный момент методы сторк:
len(str)
str.split() -тут можно указать элемент, по которому нужно разбить строку
str.lower
str.upper
str.count - не особо помню аргументы
№8___________________________________________________________________________________________________________
 1)Цикл FOR:
 for i in range(5):
    print('hello')
2)Аналогичная программа без цикла FOR:    
a = 1
while a <= 5:
    print('hello')
    a += 1
№9___________________________________________________________________________________________________________
Функция может принимать произвольное количество аргументов, либо же может вовсе их не принимать
№10___________________________________________________________________________________________________________
Рекурсия.........
Чтобы понять рекурсию, нужно понять рекурсию
Это фунция, которая вызывает сама себя
№11___________________________________________________________________________________________________________
n = int(input())


def recursive(a):
    print(a)
    if a < n:
        recursive(a + 1)


recursive(1)
______________________________________________________________________________________________________________

                        
                        
                        
                        

